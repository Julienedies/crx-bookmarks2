{"version":3,"file":"background.js","sources":["webpack:///./app/background.js"],"sourcesContent":["/*!\n * \n * Created by j on 2019-01-11.\n */\n\nimport { bookmarks, tabs } from '../libs/chrome/index'\n\nimport getDb from '../libs/db'\n\nconst trashDb = getDb('trash')\nconst visitDb = getDb('visit')\nconst shortcutDb = getDb('shortcut')\n\n// 当一个书签被删除, 把它保存到db\nbookmarks.on('onRemoved', function (id, changeInfo, event) {\n\n    let obj = {\n        index: changeInfo.index,\n        parentId: changeInfo.parentId,\n        ...changeInfo.node\n    }\n\n    console.log('保存到回收站', obj)\n\n    trashDb.set(obj)\n\n    // 一个书签被删除后, 需要删除其它相关数据\n    visitDb.remove(id)\n    shortcutDb.remove(id)\n\n})\n\nconst f = function (tab) {\n    if (!tab.url) return\n    bookmarks.search(tab.url).then(list => {\n        list.forEach(bookmark => {\n            if (bookmark.url === tab.url) {\n                console.log('添加新访问记录 => ', bookmark)\n                visitDb.get(bookmark.id).then(record => {\n                    record = record || {id: bookmark.id, count: 0}\n                    record.count += 1\n                    visitDb.set(record)\n                })\n            }\n        })\n    })\n}\n\ntabs.on((...args) => {\n    //console.log(args)\n})\n\n\n// 记录浏览器访问记录, 统计最常使用的书签\n/*tabs.on('onCreated', (tab, event)=> {\n    f(tab)\n})*/\n\ntabs.on('onUpdated', function (tabId, changeInfe, tab, event) {\n    console.log(tab.status)\n    tab.status === 'complete' && f(tab)\n})\n\n/*tabs.on('onReplaced', function (addedTabId, removedTabId, event) {\n    tabs.get(addedTabId).then(tab => {\n        f(tab)\n    })\n})*/\n"],"mappings":";;;;AASA","sourceRoot":""}